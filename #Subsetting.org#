#+TITLE: Subsetting data structures in R
#+AUTHOR: Cristian Del Gobbo
#+startup: hideblocks indent overview inlineimages entitiespretty
#+PROPERTY: header-args:R :results output :session *R* :exports both :noweb yes
#+options: toc:1

* Vectorization with examples
1) You don't need loops.
#+begin_src R
  foo <- c(1, -1, 4, 4, 0, 59, 3)
  foo + 3
  foo / 3.2

  bar <- foo[-c(4:length(foo))]
  bar

  rep(bar, times=2)

  exp(pi*1i) + 1

  prod(c(1,2,3,4,5))

  sapply(X=c(5), FUN=factorial) # apply FUN to X
#+end_src

#+RESULTS:
: [1]  4  2  7  7  3 62  6
: [1]  0.3125 -0.3125  1.2500  1.2500  0.0000 18.4375  0.9375
: [1]  1 -1  4
: [1]  1 -1  4  1 -1  4
: [1] 0+1.224647e-16i
: [1] 120
: [1] 120

2) A function takes a vector as input and calculates a summary statistic:
#+begin_src R
  sum(1:5)
  mean(1:5)
  summary(1:5)

#+end_src

#+RESULTS:
: [1] 15
: [1] 3
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:       1       2       3       3       4       5

3) A function calculates a summary from several of its arguments:
#+begin_src R
  sum(1,2,3,4,5)
  mean(c(1,2,3,4,5))

#+end_src

#+RESULTS:
: [1] 15
: [1] 3

* Retrieving vector elements
#+begin_src R
  data(Nile)
  str(Nile)
#+end_src

#+RESULTS:
:  Time-Series [1:100] from 1871 to 1970: 1120 1160 963 1210 1160 1160 813 1230 1370 1140 ...

#+begin_src R
                                          # First element in Nile
  Nile[1] # Average flow through the Nile in 1871
#+end_src

#+RESULTS:
: [1] 1120

To extract the time at which time series data were sampled, use =time=
#+begin_src R 
                                          # Extract the time
  time(Nile)
#+end_src

#+RESULTS:
#+begin_example
Time Series:
Start = 1871 
End = 1970 
Frequency = 1 
  [1] 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889
 [20] 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908
 [39] 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927
 [58] 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946
 [77] 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965
 [96] 1966 1967 1968 1969 1970
#+end_example

#+begin_src R
  class(time(Nile))
  time(Nile)[1] # NOT time(Nile[1]) - The time at which Nile[1] was sampled
#+end_src

#+RESULTS:
: [1] "ts"
: [1] 1871


What's the value of the last element of =Nile=?
#+begin_src R
  Nile[length(Nile)] #same as Nile[100] but more general
  Nile[100] # what was the avg flow of the Nile in the last year of information
#+end_src

#+RESULTS:
: [1] 740
: [1] 740

Which year was it?
#+begin_src R
  time(Nile)[length(Nile)]
#+end_src

#+RESULTS:
: [1] 1970

* Using the colon operator

Create sample vector:
#+begin_src R
  c(-1, 3.0, 4, 67, 330, -3) -> foo
  foo
#+end_src

#+RESULTS:
: [1]  -1   3   4  67 330  -3

Extract the 2nd to to the fifth element of =foo=
#+begin_src R
  foo[2:5] -> bar
  bar
#+end_src

#+RESULTS:
: [1]   3   4  67 330

What about distributivity: Is =foo[n]:foo[m]= the same as =foo[n:m]=?
#+begin_src R
  foo[2]:foo[5] -> vec
  vec
  foo[2:5] -> vec2
  vec2
#+end_src

#+RESULTS:
#+begin_example
  [1]   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26
 [25]  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50
 [49]  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74
 [73]  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98
 [97]  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122
[121] 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146
[145] 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170
[169] 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194
[193] 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218
[217] 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242
[241] 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266
[265] 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290
[289] 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314
[313] 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330
[1]   3   4  67 330
#+end_example

#+begin_src R
  identical(vec, vec2)
  all.equal(vec, vec2)
#+end_src

#+RESULTS:
: [1] FALSE
: [1] "Numeric: lengths (328, 4) differ"
* Statistical functions

What is the average of the element 2 to 5 in =foo=? Compare with 
the average of the elements of =foo=
#+begin_src R
  mean(foo[2:5])
  mean(foo)
#+end_src

#+RESULTS:
: [1] 101
: [1] 66.66667

What about the sum?
#+begin_src R
  foo[2:5] -> f
  sum(f)
  sum(foo)
#+end_src

#+RESULTS:
: [1] 404
: [1] 400

#+begin_src R
  summary(f)
  summary(foo)
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:    3.00    3.75   35.50  101.00  132.75  330.00
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   -3.00    0.00    3.50   66.67   51.25  330.00

#+begin_src R
foo[c(2,3,5,6)]
#+end_src

#+RESULTS:
: [1]   3   4 330  -3
* Logical Functions

Take =foo= and do the following in one command:
1) Add the number 5 between 4 and 67

#+begin_src R
  foo
  foo[1:3]
  foo[4:length(foo)]
  c(foo[1:3], 5, foo[4:length(foo)]) -> foo
#+end_src

#+RESULTS:
: [1]  -1   3   4  67 330  -3
: [1] -1  3  4
: [1]  67 330  -3
: [1]  -1   3   4   5  67 330  -3

Take the new =foo= and append -99, 0, 44 at the end.
#+begin_src R
  c(-99,0,4) -> vec
  append(foo, vec) -> foo
  foo

  c(foo, c(-99,0,4))
#+end_src

#+RESULTS:
: [1]  -1   3   4  67 330  -3 -99   0   4

Using logical functions, create sub-vectors of the positive, negative,
and zero elements:
#+begin_src R
  foo
  foo[foo > 0] -> pos
  pos
  foo[foo == 0] -> zeros
  zeros
  foo[foo < 0] -> neg
  neg
#+end_src

#+RESULTS:
: [1]  -1   3   4  67 330  -3 -99   0   4
: [1]   3   4  67 330   4
: [1] 0
: [1]  -1  -3 -99

What about =c(foo = 0)=
#+begin_src R
  c(foo = 0) # same as c("foo" = 0)

  c(foo == 0) # same as foo == 0
#+end_src

#+RESULTS:
: foo 
:   0
: [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE

* Select using logical index or flag vectors

What was the flow through the Nile from 1960 to 1966?
#+begin_src R
  time(Nile) -> t # Contains the times
  Nile[t >= 1960 & t <= 1966] # Select Nile values using time
  sum(Nile[t >= 1960 & t <= 1966]) # total average flow 1960-1966
#+end_src

#+RESULTS:
: [1]  815 1020  906  901 1170  912  746
: [1] 6470

* Negative indicies
#+begin_src R
foo[-1] # return all element minus the first one
foo[-length(foo)] # except last element
foo[-c(1,length(foo))] #Remove first and last
#+end_src

#+RESULTS:
: [1]   3   4  67 330  -3 -99   0   4
: [1]  -1   3   4  67 330  -3 -99   0
: [1]   3   4  67 330  -3 -99   0

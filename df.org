#+title: Data frames, Factors, Lists [codealong]
#+AUTHOR: Cristian Del Gobbo
#+SUBTITLE: Introduction to data science (DSC 105) Fall 2023
#+OPTIONS: toc:nil num:nil
#+STARTUP: overview hideblocks indent inlineimages
#+PROPERTY: header-args:R :session *R* :exports both :results output
:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_INIT_OPTIONS: transition: 'cube'
#+REVEAL_THEME: black
:END:
* Example: creating data frames

                                                                                                                              - Create three vectors to put into the data frame
                                                                                                                                1) the 1st uses the constant vector ~LETTERS~
                                                                                                                                2) the 2nd uses the ~sample~ function to draw a sample from the first
                                                                                                                                3) the 3rd is just a colon-generated vector of integers

                                                                                                                              - Extract the first three letters from =LETTERS= and store them in =L3=:
                                                                                                                                #+begin_src R
                                                                                                                                  LETTERS[1:3] -> L3
                                                                                                                                  L3
                                                                                                                                #+end_src

                                                                                                                                #+RESULTS:
                                                                                                                                : [1] "A" "B" "C"

                                                                                                                              - Use =sample= to draw 10 letters from =L3=:
                                                                                                                                #+begin_src R
                                                                                                                                  sample(L3, 
                                                                                                                                         size=10,
                                                                                                                                         replace=TRUE) -> fac
                                                                                                                                  fac
                                                                                                                                #+end_src

                                                                                                                                #+RESULTS:
                                                                                                                                :  [1] "B" "B" "A" "B" "C" "A" "C" "C" "A" "C"

                                                                                                                              - Create a data frame =df= from the number =1=, the vector =1:10=, and =fac=.
                                                                                                                                #+name: dataframe_unnamed
                                                                                                                                #+begin_src R
                                                                                                                                  df <- data.frame(1,1:10, fac)
                                                                                                                                  str(df)
                                                                                                                                #+end_src

                                                                                                                                #+RESULTS: dataframe_unnamed
                                                                                                                                : 'data.frame':	10 obs. of  3 variables:
                                                                                                                                :  $ X1   : num  1 1 1 1 1 1 1 1 1 1
                                                                                                                                :  $ X1.10: int  1 2 3 4 5 6 7 8 9 10
                                                                                                                                :  $ fac  : chr  "B" "B" "A" "B" ...

                                                                                                                              - Create a data frame =df2= with the same content but name the first
                                                                                                                                column =x= and the second column =y=:
                                                                                                                                #+name: dataframe_named
                                                                                                                                #+begin_src R
                                                                                                                                  df2 <- data.frame("x" = 1, "y"=1:10, fac)
                                                                                                                                  str(df2)
                                                                                                                                #+end_src

                                                                                                                                #+RESULTS: dataframe_named
                                                                                                                                : 'data.frame':	10 obs. of  3 variables:
                                                                                                                                :  $ x  : num  1 1 1 1 1 1 1 1 1 1
                                                                                                                                :  $ y  : int  1 2 3 4 5 6 7 8 9 10
                                                                                                                                :  $ fac: chr  "B" "B" "A" "B" ...

                                                                                                                              - More information: check out ~example(data.frame)~ (on the R console).

* Functions to test data structures

- Check if =df2= is a: vector, matrix, list, data frame:
  #+begin_src R :session :results output
    class(df2)
    is.vector(df2)
    is.matrix(df2)
    is.list(df2)
    is.data.frame(df2)
  #+end_src

  #+RESULTS:
  : [1] "data.frame"
  : [1] FALSE
  : [1] FALSE
  : [1] TRUE
  : [1] TRUE

- Surprise: data frames are special [rectangular] lists

- Can a data frame contain a data frame? Test this by trying to add =df=
  to =df2=:
  #+begin_src R
  str(data.frame(df, df2))
  #+end_src

  #+RESULTS:
  : 'data.frame':	10 obs. of  6 variables:
  :  $ X1   : num  1 1 1 1 1 1 1 1 1 1
  :  $ X1.10: int  1 2 3 4 5 6 7 8 9 10
  :  $ fac  : chr  "B" "B" "A" "B" ...
  :  $ x    : num  1 1 1 1 1 1 1 1 1 1
  :  $ y    : int  1 2 3 4 5 6 7 8 9 10
  :  $ fac.1: chr  "B" "B" "A" "B" ...

** Practice

- Create the data frame shown [[https://github.com/birkenkrahe/ds1/blob/main/img/7_df.png][in this figure]], and name it =df=:

Hints:
- Define vectors with ~c()~
- Create data frame with ~data.frame()~
- You can rename columns with ~colnames()~
- You can auto-convert ~character~ to ~factor
~
#+begin_src R :session :results output
  ## define vectors
  c(10,20,30,40) -> ID
  c("book", "pen", "textbook", "pencil_case") -> items
  c(TRUE, FALSE, TRUE, FALSE) -> store
  c(2.5, 8.0, 10.0, 7.0) -> price
  ## create data frame and properties
  df3 <- data.frame(ID, items, store, price, stringsAsFactors=TRUE)
  ## auto-convert characters to factors
  rownames(df3)
  colnames(df3)
  str(df3)
#+end_src

#+RESULTS:
: [1] "1" "2" "3" "4"
: [1] "ID"    "items" "store" "price"
: 'data.frame':	4 obs. of  4 variables:
:  $ ID   : num  10 20 30 40
:  $ items: Factor w/ 4 levels "book","pen","pencil_case",..: 1 2 4 3
:  $ store: logi  TRUE FALSE TRUE FALSE
:  $ price: num  2.5 8 10 7

* Select subsets using index operators

- Use the dataframe =df= [[https://github.com/birkenkrahe/ds1/blob/main/img/7_df.png][shown here]] that you created earlier.

- Select subsets using the index operators ~$~ and ~[]~:
  1) Select rows 1 to 2 using ~[]~
  2) Select column 2 using ~[]~ and ~$~
  3) Select row 3 of column 2  using ~[]~ and ~$~
  4) Select rows 1 to 3 in columns 3 and 4 using ~[]~ and ~$~
  5) Select rows 2 to 3, and columns 1 and 4 using ~[]~ and ~$~

  #+begin_src R
    ls()
    str(df3)
  #+end_src

  #+RESULTS:
  :  [1] "df"          "df2"         "df3"         "Distance"    "fac"         "ID"         
  :  [7] "items"       "L3"          "price"       "Speed"       "store"       "ToothGrowth"
  : 'data.frame':	4 obs. of  4 variables:
  :  $ ID   : num  10 20 30 40
  :  $ items: Factor w/ 4 levels "book","pen","pencil_case",..: 1 2 4 3
  :  $ store: logi  TRUE FALSE TRUE FALSE
  :  $ price: num  2.5 8 10 7

#+begin_src R
  df3[c(1,2),]
  df3[,1]
  df3$items

  df3[3,2]
  df3$items[3]

  df3[1:3,c(3,4)]

  df3[2:3, c(1,4)]
  df3[2:3, c("ID", "price")]
#+end_src

#+RESULTS:
#+begin_example
  ID items store price
1 10  book  TRUE   2.5
2 20   pen FALSE   8.0
[1] 10 20 30 40
[1] book        pen         textbook    pencil_case
Levels: book pen pencil_case textbook
[1] textbook
Levels: book pen pencil_case textbook
[1] textbook
Levels: book pen pencil_case textbook
  store price
1  TRUE   2.5
2 FALSE   8.0
3  TRUE  10.0
  ID price
2 20     8
3 30    10
  ID price
2 20     8
3 30    10
#+end_example

* Select indices and values using ~which~, ~names~, ~%in%~

Select data frame indices using functions ~which~, ~colnames~ and ~%in%~:
1) Print the column index for the column ~price~ using ~colnames~
2) Store the row index for ~textbook~ in ~idx~
3) Print the entry ~textbook~ using ~idx~
4) Check if ~pencil_case~ is a store item using ~%in%~

For the last question, the format of the ~%in%~ matching function to
find a string is: ~string %in% vector~

#+begin_src R
  colnames(df3)
  which(colnames(df3) == "price")


  which(df3$items == "textbook") -> idx
  idx

  df3$items[idx]

  "pencil_case" %in% df3$items
#+end_src

#+RESULTS:
: [1] "ID"    "items" "store" "price"
: [1] 4
: [1] 3
: [1] textbook
: Levels: book pen pencil_case textbook
: [1] TRUE

* Select subsets using the ~subset~ function

Using ~subset~,
1) Select product IDs above 20
2) Select all books listed
3) Select all items cheaper than $11 and in stock

   #+begin_src R
     str(airquality)
     subset(airquality, Temp>80, select=c(Ozone, Temp)) |> head(4)

     subset(df3, ID>20, select="ID")
     df3$ID[ID>20]

     subset(df3, (price<11) & (store == TRUE))
   #+end_src

   #+RESULTS:
   #+begin_example
   'data.frame':	153 obs. of  6 variables:
    $ Ozone  : int  41 36 12 18 NA 28 23 19 8 NA ...
    $ Solar.R: int  190 118 149 313 NA NA 299 99 19 194 ...
    $ Wind   : num  7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...
    $ Temp   : int  67 72 74 62 56 66 65 59 61 69 ...
    $ Month  : int  5 5 5 5 5 5 5 5 5 5 ...
    $ Day    : int  1 2 3 4 5 6 7 8 9 10 ...
      Ozone Temp
   29    45   81
   35    NA   84
   36    NA   85
   38    29   82
     ID
   3 30
   4 40
   [1] 30 40
     ID    items store price
   1 10     book  TRUE   2.5
   3 30 textbook  TRUE  10.0
   #+end_example

* Some useful functions

- ~dim~ gives you the data frame dimensions
  #+begin_src R
  dim(df3)
  #+end_src

  #+RESULTS:
  : [1] 4 4

- ~nrow~ gives you the number of rows
  #+begin_src R
  nrow(df3)
  #+end_src

  #+RESULTS:
  : [1] 4

- ~ncol~ gives you the number of columns
  #+begin_src R
    ncol(df3)
  #+end_src

  #+RESULTS:
  : [1] 4

- ~head(x=,N)~ gives you the first ~N~ rows
  #+begin_src R
    head(df3, 3)
  #+end_src

  #+RESULTS:
  :   ID    items store price
  : 1 10     book  TRUE   2.5
  : 2 20      pen FALSE   8.0
  : 3 30 textbook  TRUE  10.0

- ~order~ gives you the indices of an ordered vector
  #+begin_src R
    order(df3$items)
    sort(df3$items)
  #+end_src

  #+RESULTS:
  : [1] 1 2 4 3
  : [1] book        pen         pencil_case textbook   
  : Levels: book pen pencil_case textbook

- ~subset~ gives you a subset of any data structure
  #+begin_src
  
  #+end_src

* Trying to create a non-rectangular data frame

- Define two vectors of different length 2, 4
- Define two vectors of different lengths 2, 3
- Combine them using ~data.frame~

#+begin_src R

#+end_src

- [[https://github.com/birkenkrahe/ds1/blob/main/img/7_challenge.png][This image]] shows what's going on (for two vectors)

* Extracting information from a data frame

- Use the dataset ~ToothGrowth~ (aka ~tg~)
- Find the number of cases in which tooth length is less
  than 5. Expected output: =10.0  8.2  9.4  9.7 14.5=

  #+begin_src R :session :results output

  #+end_src

* Extract factor levels from a data frame

- What's the class of ~tg$supp~?
- What're the levels of ~tg$supp~?
- We want to compare ~mean~ tooth length for each ~level~

#+begin_src R :session :results output

#+end_src

* What about lists?

1) Check the object and storage type of =mtcars=
   #+begin_src R

   #+end_src

2) Extract the first element of the =mpg= vector of =mtcars=:
   - Using the accessor operator =$=
   - Using only the =[]= operator for a =list=

   #+begin_src R

   #+end_src

3) Check that both expressions are =identical=.

   #+begin_src R

   #+end_src

4) Create a =list= from =mtcars= and check its storage type.

   #+begin_src R

   #+end_src

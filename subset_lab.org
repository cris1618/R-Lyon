#+TITLE: In-class assignment: Subsetting and Extracting
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Introduction to data science (DSC 105) Fall 2022
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:R :session *R* :results output
* DONE README

- Put your name in the header next to "(pledged)"
- Practice file for the lecture on "Subsetting and extracting indices
  in R" ([[https://github.com/birkenkrahe/ds1/blob/main/org/7_subsetting.org][GitHub]])
- All content from that lecture is also available [[https://www.youtube.com/playlist?list=PL6SfZh1-kWXl3_YDc-8SS5EuG4h1aILHz][on YouTube]]
- Create, execute and debug R code blocks as needed
- Upload the completed file as a class assignment to Canvas
- You find the solutions in the PDF repository later (GitHub)

* TODO 10 SUBSETTING QUESTIONS

1) Store a vector of these 10 values in ~foo~: ~7 5 6 1 2 10 8 3 8 2~,
   print it and show that it has 10 elements using a function.

   #+begin_src R
     c(7, 5, 6, 1, 2, 10, 8, 3, 8, 2) -> foo
     foo
     length(foo)
   #+end_src

   #+RESULTS:
   :  [1]  7  5  6  1  2 10  8  3  8  2
   : [1] 10

2) Extract the fifth through the seventh element of =foo= and add =5= to
   these elements to get the output: =7 15 13=

   #+begin_src R
   foo[5:7] + 5
   #+end_src

   #+RESULTS:
   : [1]  7 15 13

3) Create a logical flag vector of those elements of =foo= that are
   greater than =5= and store it in =idx=.

   #+begin_src R
   foo > 5 -> idx
   #+end_src

   #+RESULTS:

4) Extract the values of =foo= that are greater than =5= using =idx=.

   #+begin_src R
   foo[idx]
   #+end_src

   #+RESULTS:
   : [1]  7  6 10  8  8

5) =Which= vector indices of =foo= correspond to the values greater or
   equal than =5=? Store the answer in =idx2= - Output: =1 2 3 6 7 9=.

   #+begin_src R
   which(foo >= 5) -> idx2
   idx2
   #+end_src

   #+RESULTS:
   : [1] 1 2 3 6 7 9

6) Use =idx2= to extract the values of =foo= that are greater or equal
   than =5=. Output: =7  5  6 10  8  8=

   #+begin_src R
   foo[idx2]
   #+end_src

   #+RESULTS:
   : [1]  7  5  6 10  8  8

7) Extract every 2nd element of =foo= using =seq=. Output: =7 6 2 8 8=.

   #+begin_src R
   foo[seq(1, length(foo), 2)]
   #+end_src

   #+RESULTS:
   : [1] 7 6 2 8 8

8) Remove the elements with even indices from =foo= and store them in
   =bar=, and store the elements with odd indices from =foo= in =baz=.

   #+begin_src R
   foo[c(2,4,6,8,10)] -> baz
   foo[c(1,3,5,7,9)] -> bar
   bar
   baz
   #+end_src

   #+RESULTS:
   : [1] 7 6 2 8 8
   : [1]  5  1 10  3  2

9) Make all elements of =baz= negative.

   #+begin_src R
   baz * -1 -> baz
   baz
   #+end_src

   #+RESULTS:
   : [1]  -5  -1 -10  -3  -2

10) Append =baz= to =bar= and store the result in =foo2=. Output:
    =7 6 2 8 8 -5 -1 -10 -3 -2=.
    #+begin_src R
    foo2 <- c(bar, baz)
    foo2
    #+end_src

    #+RESULTS:
    :  [1]   7   6   2   8   8  -5  -1 -10  -3  -2

* TODO 10 QUESTIONS ABOUT THE NILE

1) Print the length of the data set ~Nile~ using an R function.
   #+begin_src R
   data(Nile)
   length(Nile)
   #+end_src

   #+RESULTS:
   : [1] 100

2) Retrieve the second to fifth value of the ~Nile~ data set. There are
   (at least) two ways to do this, with the concatenation function or
   with the colon operator.
   #+begin_src R
   Nile[2:5]
   #+end_src

   #+RESULTS:
   : [1] 1160  963 1210 1160

3) Which data science (not R) question does the last output answer?
   Write a full sentence.

   #+begin_quote
   Answer: What was the annual flow of the river Nile between 1872 and 1875?
   #+end_quote

4) Extract the year that corresponds to the last value of
   ~Nile~. Remember that the years are stored in ~time(Nile)~.
   #+begin_src R
   time(Nile)[length(Nile)]
   #+end_src

   #+RESULTS:
   : [1] 1970

5) What was the Nile flow in 1967? Tip: use a logical operator, and
   store ~time(Nile)~ in ~t~ for the remaining questions.
   #+begin_src R
   time(Nile) -> t
   Nile[t == 1967]
   #+end_src

   #+RESULTS:
   : [1] 919

6) What is the index of the third-to-last element of ~Nile~? Use the
   ~which~ function to answer this question.
   #+begin_src R
   Nile[length(Nile)-3] -> val
   which(Nile == Nile[length(Nile)-3]) -> idx3
   idx3
   #+end_src

   #+RESULTS:
   : [1] 97

7) How many values of ~Nile~ are larger than the third-to-last value?
   #+begin_src R
   Nile > val
   #+end_src

   #+RESULTS:
   #+begin_example
   Time Series:
   Start = 1871 
   End = 1970 
   Frequency = 1 
     [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
    [17]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE
    [33]  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE
    [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE
    [65]  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
    [81] FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE
    [97] FALSE FALSE FALSE FALSE
   #+end_example

8) How much water flowed down the Nile between 1871 and 1970?
   #+begin_src R
   sum(Nile)
   #+end_src

   #+RESULTS:
   : [1] 91935

9) In which year was the Nile at its lowest level? Use the ~min~
   function for this task and store the result in ~tmin~
   #+begin_src R
   min(Nile)
   which(Nile == min(Nile)) -> idx4
   t[idx4] -> tmin
   tmin
   #+end_src

   #+RESULTS:
   : [1] 456
   : [1] 1913

10) Make a line plot of all observations in the data set ~Nile~ using
    ~plot~, mark the year of the lowest level of the Nile with a
    vertical line, and the average flow through the Nile with a
    horizontal line. The result is stored in ~nile.png~.

    You can draw a vertical line at point ~x~ with ~abline(v=x)~, and a
    horizontal line at point ~y~ with ~abline(h=y)~.

    #+begin_src R :results graphics file output :file nile.png
    plot(Nile)
    abline(v=tmin)
    abline(h=mean(Nile))
    #+end_src

    #+RESULTS:
    [[file:nile.png]]

    Tip: You can change the appearance of lines with the parameters ~col~,
    ~lty~, ~lwd~. E.g. ~col="red, lty=2, lwd=2~ for a red, dashed, thick
    line.
